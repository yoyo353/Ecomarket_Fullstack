product-service/
├── HELP.md
├── mvnw
├── mvnw.cmd
├── pom.xml
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/ecomarket/productservice/
│   │   │       ├── assemblers/
│   │   │       │   └── ProductoModelAssembler.java   # HATEOAS avanzado, links condicionales
│   │   │       ├── config/
│   │   │       │   └── SwaggerConfig.java           # Configuración avanzada OpenAPI/Swagger
│   │   │       ├── controller/
│   │   │       │   ├── ProductoController.java      # CRUD v1, OpenAPI detallado
│   │   │       │   └── ProductoControllerV2.java    # CRUD v2, HATEOAS, filtros, estadísticas, OpenAPI
│   │   │       ├── model/
│   │   │       │   └── Producto.java                # Modelo con anotaciones @Schema
│   │   │       ├── repository/
│   │   │       │   └── ProductRepository.java       # Métodos personalizados y estándar
│   │   │       ├── service/
│   │   │       │   └── ProductoService.java         # Lógica de negocio, filtros, estadísticas
│   │   │       ├── DataLoader.java                  # Carga de datos de prueba con DataFaker
│   │   │       └── ProductServiceApplication.java   # Clase principal Spring Boot
│   │   └── resources/
│   │       ├── application.properties               # Configuración general, Swagger UI
│   │       ├── application-dev.properties           # Configuración H2, perfil dev
│   │       └── application-test.properties          # Configuración H2, perfil test
│   └── test/
│       └── java/
│           └── com/ecomarket/productservice/
│               ├── controller/
│               │   └── ProductoControllerTest.java  # Tests unitarios de controlador v1
│               ├── service/
│               │   └── ProductoServiceTest.java     # Tests unitarios de servicio
│               └── ProductServiceApplicationTests.java # Test de contexto Spring Boot
└── target/

# Notas de estructura y mejoras:
# - Todos los controladores y servicios documentados con OpenAPI/Swagger (anotaciones @Operation, @ApiResponse, @Schema, ejemplos, etc.)
# - ProductoModelAssembler implementa lógica HATEOAS avanzada y links condicionales.
# - DataLoader genera datos realistas con DataFaker para pruebas y desarrollo.
# - Métodos de filtrado, estadísticas y endpoints extendidos en ProductoControllerV2.
# - Tests unitarios y de integración para servicios y controladores.
# - application.properties y perfiles dev/test con configuración avanzada de Swagger, H2 y perfiles.
# - Clases internas relevantes (ej: EstadisticasProductos) documentadas en controladores.
# - Estructura lista para ampliación de lógica de negocio, seguridad y documentación avanzada.

// ===================== CLASES PRINCIPALES Y DOCUMENTACIÓN =====================

// product-service/src/main/java/com/ecomarket/productservice/model/Producto.java
package com.ecomarket.productservice.model;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "producto")
@Data
@AllArgsConstructor
@NoArgsConstructor
@Schema(description = "Modelo de datos para productos ecológicos de EcoMarket")
public class Producto {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Schema(description = "Identificador único del producto", example = "1", accessMode = Schema.AccessMode.READ_ONLY)
    private Integer productoId;
    @Column(name = "nombre_producto")
    @Schema(description = "Nombre comercial del producto", example = "Jabón de lavanda orgánico", required = true)
    private String nombreProducto;
    @Column(name = "codigo_sku")
    @Schema(description = "Código SKU único del producto", example = "ECO-001", required = true)
    private String codigoSKU;
    @Column(name = "precio_unitario")
    @Schema(description = "Precio de venta al público", example = "12.99", required = true)
    private Double precioUnitario;
    @Column(name = "precio_compra")
    @Schema(description = "Precio de compra o costo", example = "6.50", required = true)
    private Double precioCompra;
    @Column(name = "margen_ganancia")
    @Schema(description = "Margen de ganancia (0.0 a 1.0)", example = "0.50", required = true)
    private Double margenGanancia;
    @Schema(description = "Descripción detallada del producto", example = "Jabón 100% natural elaborado con aceites esenciales de lavanda.")
    private String descripcion;
    @Column(name = "categoria_id")
    @Schema(description = "ID de la categoría del producto", example = "1", required = true)
    private Integer categoriaId;
    @Column(name = "proveedor_principal_id")
    @Schema(description = "ID del proveedor principal", example = "1", required = true)
    private Integer proveedorPrincipalId;
    @Column(name = "es_ecologico")
    @Schema(description = "Indica si el producto es ecológico/sustentable", example = "true", required = true)
    private Boolean esEcologico;
    @Column(name = "fecha_registro")
    @Schema(description = "Fecha y hora de registro del producto", example = "2024-06-24 10:00:00", accessMode = Schema.AccessMode.READ_ONLY)
    private String fechaRegistro;
    @Schema(description = "Estado actual del producto", example = "ACTIVE", allowableValues = {"ACTIVE", "INACTIVE", "DISCONTINUED"})
    private String estado;
}

// product-service/src/main/java/com/ecomarket/productservice/repository/ProductRepository.java
package com.ecomarket.productservice.repository;

import com.ecomarket.productservice.model.Producto;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ProductRepository extends JpaRepository<Producto, Integer> {
    Optional<Producto> findByCodigoSKU(String codigoSKU);
    List<Producto> findByEsEcologico(Boolean esEcologico);
    List<Producto> findByCategoriaId(Integer categoriaId);
    List<Producto> findByEstado(String estado);
    List<Producto> findByProveedorPrincipalId(Integer proveedorPrincipalId);
    List<Producto> findByPrecioUnitarioBetween(Double precioMin, Double precioMax);
    boolean existsByCodigoSKU(String codigoSKU);
    // NUEVOS MÉTODOS PERSONALIZADOS
    List<Producto> findByProveedorPrincipalIdAndEsEcologico(Integer proveedorId, Boolean esEcologico);
    List<Producto> findByPrecioUnitarioGreaterThan(Double precio);
    List<Producto> findByPrecioUnitarioLessThan(Double precio);
    List<Producto> findByNombreProductoContainingIgnoreCase(String nombre);
    Long countByEsEcologico(Boolean esEcologico);
}

// product-service/src/main/java/com/ecomarket/productservice/service/ProductoService.java
package com.ecomarket.productservice.service;

import com.ecomarket.productservice.model.Producto;
import com.ecomarket.productservice.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ProductoService {
    @Autowired
    private ProductRepository productRepository;

    // Obtener todos los productos
    public List<Producto> obtenerTodos() {
        return productRepository.findAll();
    }

    // Buscar producto por ID
    public Producto buscarPorId(Integer id) {
        Optional<Producto> producto = productRepository.findById(id);
        return producto.orElse(null);
    }

    // Buscar producto por SKU
    public Producto buscarPorSKU(String sku) {
        Optional<Producto> producto = productRepository.findByCodigoSKU(sku);
        return producto.orElse(null);
    }

    // Guardar producto
    public Producto guardar(Producto producto) {
        return productRepository.save(producto);
    }

    // Actualizar producto
    public Producto actualizar(Integer id, Producto productoActualizado) {
        if (productRepository.existsById(id)) {
            productoActualizado.setProductoId(id); // Aseguramos que se actualice el existente
            return productRepository.save(productoActualizado);
        }
        return null;
    }

    // Eliminar producto
    public boolean eliminar(Integer id) {
        if (productRepository.existsById(id)) {
            productRepository.deleteById(id);
            return true;
        }
        return false;
    }

    // Total de productos
    public int totalProductos() {
        return (int) productRepository.count();
    }

    // Productos ecológicos
    public List<Producto> obtenerProductosEcologicos() {
        return productRepository.findByEsEcologico(true);
    }

    // Productos por categoría
    public List<Producto> obtenerPorCategoria(Integer categoriaId) {
        return productRepository.findByCategoriaId(categoriaId);
    }

    // Productos por proveedor y tipo ecológico
    public List<Producto> obtenerPorProveedorYEcologico(Integer proveedorId, Boolean esEcologico) {
        return productRepository.findByProveedorPrincipalIdAndEsEcologico(proveedorId, esEcologico);
    }

    // Productos por rango de precio
    public List<Producto> obtenerPorRangoPrecio(Double precioMin, Double precioMax) {
        return productRepository.findByPrecioUnitarioBetween(precioMin, precioMax);
    }
}

// product-service/src/main/java/com/ecomarket/productservice/assemblers/ProductoModelAssembler.java
package com.ecomarket.productservice.assemblers;

import com.ecomarket.productservice.controller.ProductoController;
import com.ecomarket.productservice.model.Producto;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.RepresentationModelAssembler;
import org.springframework.stereotype.Component;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

@Component
public class ProductoModelAssembler implements RepresentationModelAssembler<Producto, EntityModel<Producto>> {
    @Override
    public EntityModel<Producto> toModel(Producto producto) {
        return EntityModel.of(producto)
                .add(linkTo(methodOn(ProductoController.class).obtenerPorId(producto.getProductoId())).withSelfRel())
                .add(linkTo(ProductoController.class).withRel("productos"))
                .add(linkTo(methodOn(ProductoController.class).obtenerProductosEcologicos()).withRel("ecologicos"))
                .add(linkTo(methodOn(ProductoController.class).obtenerPorCategoria(producto.getCategoriaId())).withRel("categoria"));
    }
    // Método auxiliar para modelos simples (sin todos los links)
    public EntityModel<Producto> toSimpleModel(Producto producto) {
        return EntityModel.of(producto)
                .add(linkTo(methodOn(ProductoController.class).obtenerPorId(producto.getProductoId())).withSelfRel());
    }
}

// product-service/src/main/java/com/ecomarket/productservice/controller/ProductoController.java
package com.ecomarket.productservice.controller;

import com.ecomarket.productservice.model.Producto;
import com.ecomarket.productservice.service.ProductoService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/productos")
@Tag(name = "Productos", description = "API para la gestión de productos ecológicos")
public class ProductoController {
    @Autowired
    private ProductoService productoService;

    // Obtener todos los productos
    @Operation(
        summary = "Obtener todos los productos",
        description = "Retorna una lista completa de todos los productos disponibles en el catálogo"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Lista de productos obtenida exitosamente",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Producto.class)
            )
        ),
        @ApiResponse(
            responseCode = "500",
            description = "Error interno del servidor"
        )
    })
    @GetMapping
    public ResponseEntity<List<Producto>> obtenerTodos() {
        List<Producto> productos = productoService.obtenerTodos();
        return ResponseEntity.ok(productos);
    }

    // Obtener producto por ID
    @Operation(
        summary = "Obtener producto por ID",
        description = "Busca y retorna un producto específico usando su identificador único"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Producto encontrado exitosamente",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Producto.class)
            )
        ),
        @ApiResponse(
            responseCode = "404",
            description = "Producto no encontrado"
        )
    })
    @GetMapping("/{id}")
    public ResponseEntity<Producto> obtenerPorId(
            @Parameter(description = "ID único del producto", example = "1")
            @PathVariable Integer id) {
        Producto producto = productoService.buscarPorId(id);
        if (producto != null) {
            return ResponseEntity.ok(producto);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // Crear nuevo producto
    @Operation(
        summary = "Crear nuevo producto",
        description = "Registra un nuevo producto en el sistema"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "201",
            description = "Producto creado exitosamente",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Producto.class)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "Solicitud incorrecta (faltan datos obligatorios)"
        ),
        @ApiResponse(
            responseCode = "409",
            description = "Conflicto (el SKU ya existe)"
        )
    })
    @PostMapping
    public ResponseEntity<Producto> crearProducto(
            @Parameter(description = "Datos del nuevo producto")
            @RequestBody Producto producto) {
        // Validar campos obligatorios
        if (producto.getNombreProducto() == null || producto.getCodigoSKU() == null ||
            producto.getPrecioUnitario() == null || producto.getPrecioCompra() == null ||
            producto.getMargenGanancia() == null || producto.getCategoriaId() == null ||
            producto.getProveedorPrincipalId() == null) {
            return ResponseEntity.badRequest().build();
        }
        // Verificar si el SKU ya existe
        if (productoService.buscarPorSKU(producto.getCodigoSKU()) != null) {
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
        Producto nuevoProducto = productoService.guardar(producto);
        return ResponseEntity.created(
                linkTo(methodOn(ProductoController.class).obtenerPorId(nuevoProducto.getProductoId())).toUri())
                .body(nuevoProducto);
    }

    // Actualizar producto existente
    @Operation(
        summary = "Actualizar producto",
        description = "Actualiza la información de un producto existente"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Producto actualizado exitosamente",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Producto.class)
            )
        ),
        @ApiResponse(
            responseCode = "404",
            description = "Producto no encontrado"
        ),
        @ApiResponse(
            responseCode = "400",
            description = "Solicitud incorrecta (faltan datos obligatorios)"
        )
    })
    @PutMapping("/{id}")
    public ResponseEntity<Producto> actualizarProducto(
            @Parameter(description = "ID del producto a actualizar", example = "1")
            @PathVariable Integer id,
            @Parameter(description = "Datos actualizados del producto")
            @RequestBody Producto productoActualizado) {
        // Validar campos obligatorios
        if (productoActualizado.getNombreProducto() == null || productoActualizado.getCodigoSKU() == null ||
            productoActualizado.getPrecioUnitario() == null || productoActualizado.getPrecioCompra() == null ||
            productoActualizado.getMargenGanancia() == null || productoActualizado.getCategoriaId() == null ||
            productoActualizado.getProveedorPrincipalId() == null) {
            return ResponseEntity.badRequest().build();
        }
        Producto productoExistente = productoService.buscarPorId(id);
        if (productoExistente == null) {
            return ResponseEntity.notFound().build();
        }
        // Actualizar solo si el SKU ha cambiado o es único
        if (!productoActualizado.getCodigoSKU().equals(productoExistente.getCodigoSKU()) &&
            productoService.buscarPorSKU(productoActualizado.getCodigoSKU()) != null) {
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
        Producto productoActualizadoDb = productoService.actualizar(id, productoActualizado);
        return ResponseEntity.ok(productoActualizadoDb);
    }

    // Eliminar producto
    @Operation(
        summary = "Eliminar producto",
        description = "Elimina un producto del sistema"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "204",
            description = "Producto eliminado exitosamente"
        ),
        @ApiResponse(
            responseCode = "404",
            description = "Producto no encontrado"
        )
    })
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> eliminarProducto(
            @Parameter(description = "ID del producto a eliminar", example = "1")
            @PathVariable Integer id) {
        boolean eliminado = productoService.eliminar(id);
        if (eliminado) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}

// product-service/src/main/java/com/ecomarket/productservice/controller/ProductoControllerV2.java
package com.ecomarket.productservice.controller;

import com.ecomarket.productservice.assemblers.ProductoModelAssembler;
import com.ecomarket.productservice.model.Producto;
import com.ecomarket.productservice.service.ProductoService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

@RestController
@RequestMapping("/api/v2/productos")
@Tag(name = "Productos V2", description = "API con HATEOAS para gestión avanzada de productos ecológicos")
public class ProductoControllerV2 {
    @Autowired
    private ProductoService productoService;
    @Autowired
    private ProductoModelAssembler assembler;

    // Obtener todos los productos con HATEOAS
    @Operation(summary = "Obtener todos los productos con HATEOAS")
    @GetMapping
    public CollectionModel<EntityModel<Producto>> obtenerTodos() {
        List<EntityModel<Producto>> productos = productoService.obtenerTodos().stream()
                .map(assembler::toModel)
                .collect(Collectors.toList());

        return CollectionModel.of(productos)
                .add(linkTo(methodOn(ProductoControllerV2.class).obtenerTodos()).withSelfRel())
                .add(linkTo(methodOn(ProductoControllerV2.class).obtenerProductosEcologicos()).withRel("ecologicos"))
                .add(linkTo(methodOn(ProductoControllerV2.class).totalProductos()).withRel("total"));
    }

    // Obtener producto por ID con HATEOAS
    @Operation(
        summary = "Obtener producto por ID con HATEOAS",
        description = "Busca y retorna un producto específico usando su identificador único, con enlaces HATEOAS"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Producto encontrado exitosamente",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Producto.class)
            )
        ),
        @ApiResponse(
            responseCode = "404",
            description = "Producto no encontrado"
        )
    })
    @GetMapping("/{id}")
    public ResponseEntity<EntityModel<Producto>> obtenerPorId(
            @Parameter(description = "ID único del producto", example = "1")
            @PathVariable Integer id) {
        Producto producto = productoService.buscarPorId(id);
        if (producto != null) {
            EntityModel<Producto> modelo = assembler.toModel(producto);
            return ResponseEntity.ok(modelo);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // Obtener productos ecológicos con HATEOAS
    @Operation(
        summary = "Obtener productos ecológicos",
        description = "Retorna una lista de productos que son ecológicos/sustentables"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Lista de productos ecológicos obtenida exitosamente",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Producto.class)
            )
        ),
        @ApiResponse(
            responseCode = "500",
            description = "Error interno del servidor"
        )
    })
    @GetMapping("/ecologicos")
    public ResponseEntity<List<EntityModel<Producto>>> obtenerProductosEcologicos() {
        List<EntityModel<Producto>> productosEcologicos = productoService.obtenerProductosEcologicos().stream()
                .map(assembler::toModel)
                .collect(Collectors.toList());
        return ResponseEntity.ok(productosEcologicos);
    }

    // Obtener total de productos
    @Operation(
        summary = "Obtener total de productos",
        description = "Retorna el número total de productos en el sistema"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Total de productos obtenido exitosamente",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Long.class)
            )
        ),
        @ApiResponse(
            responseCode = "500",
            description = "Error interno del servidor"
        )
    })
    @GetMapping("/total")
    public ResponseEntity<Long> totalProductos() {
        long total = productoService.totalProductos();
        return ResponseEntity.ok(total);
    }

    // Filtrar productos
    @Operation(
        summary = "Filtrar productos",
        description = "Retorna una lista de productos que coinciden con los criterios de filtro especificados"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Lista de productos filtrados obtenida exitosamente",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Producto.class)
            )
        ),
        @ApiResponse(
            responseCode = "500",
            description = "Error interno del servidor"
        )
    })
    @GetMapping("/filtrar")
    public ResponseEntity<List<EntityModel<Producto>>> filtrarProductos(
            @RequestParam(required = false) Integer categoriaId,
            @RequestParam(required = false) Integer proveedorId,
            @RequestParam(required = false) Boolean esEcologico,
            @RequestParam(required = false) Double precioMin,
            @RequestParam(required = false) Double precioMax) {
        List<Producto> productosFiltrados = productoService.obtenerPorCategoria(categoriaId);
        if (proveedorId != null && esEcologico != null) {
            productosFiltrados = productosFiltrados.stream()
                    .filter(p -> p.getProveedorPrincipalId().equals(proveedorId) && p.getEsEcologico().equals(esEcologico))
                    .collect(Collectors.toList());
        }
        if (precioMin != null && precioMax != null) {
            productosFiltrados = productosFiltrados.stream()
                    .filter(p -> p.getPrecioUnitario() >= precioMin && p.getPrecioUnitario() <= precioMax)
                    .collect(Collectors.toList());
        }
        List<EntityModel<Producto>> modelos = productosFiltrados.stream()
                .map(assembler::toModel)
                .collect(Collectors.toList());
        return ResponseEntity.ok(modelos);
    }

    // Clase interna para estadísticas de productos
    public static class EstadisticasProductos {
        private long totalProductos;
        private long totalEcologicos;
        private double precioPromedio;
        // Getters y setters
    }

    // Obtener estadísticas de productos
    @Operation(
        summary = "Obtener estadísticas de productos",
        description = "Retorna estadísticas como total de productos, total de ecológicos y precio promedio"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Estadísticas de productos obtenidas exitosamente",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = EstadisticasProductos.class)
            )
        ),
        @ApiResponse(
            responseCode = "500",
            description = "Error interno del servidor"
        )
    })
    @GetMapping("/estadisticas")
    public ResponseEntity<EstadisticasProductos> obtenerEstadisticas() {
        long total = productoService.totalProductos();
        long totalEcologicos = productoService.obtenerProductosEcologicos().size();
        double precioPromedio = productoService.obtenerTodos().stream()
                .mapToDouble(Producto::getPrecioUnitario)
                .average()
                .orElse(0.0);
        EstadisticasProductos stats = new EstadisticasProductos();
        stats.setTotalProductos(total);
        stats.setTotalEcologicos(totalEcologicos);
        stats.setPrecioPromedio(precioPromedio);
        return ResponseEntity.ok(stats);
    }
}

// product-service/src/main/java/com/ecomarket/productservice/config/SwaggerConfig.java
package com.ecomarket.productservice.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

@Configuration
public class SwaggerConfig {
    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("EcoMarket 2025 - API de Productos")
                        .version("1.0")
                        .description("Documentación de la API para el sistema de productos ecológicos de EcoMarket"))
                .servers(List.of(
                        new Server()
                                .url("http://localhost:8090")
                                .description("Servidor de Desarrollo"),
                        new Server()
                                .url("https://api.ecomarket.cl")
                                .description("Servidor de Producción")
                ));
    }
}

// product-service/src/main/java/com/ecomarket/productservice/DataLoader.java
package com.ecomarket.productservice;

import com.ecomarket.productservice.model.Producto;
import com.ecomarket.productservice.repository.ProductRepository;
import net.datafaker.Faker;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;

@Profile("dev")
@Component
public class DataLoader implements CommandLineRunner {
    @Autowired
    private ProductRepository productRepository;

    @Override
    public void run(String... args) throws Exception {
        Faker faker = new Faker();
        Random random = new Random();
        // Estados posibles
        String[] estados = {"ACTIVE", "INACTIVE", "DISCONTINUED"};
        System.out.println("🌱 Generando datos falsos para EcoMarket...");
        // Generar 50 productos ecológicos
        for (int i = 0; i < 50; i++) {
            Producto producto = new Producto();
            // Generar SKU único
            producto.setCodigoSKU("ECO-" + String.format("%03d", i + 1));
            // Nombres de productos ecológicos creativos
            String nombreProducto = generarNombreProductoEcologico(faker, random);
            producto.setNombreProducto(nombreProducto);
            // Precios realistas
            double precioCompra = faker.number().randomDouble(2, 1, 50);
            // Generar margen de ganancia entre 0.3 y 0.8 (30% a 80%)
            double margenGanancia = 0.3 + (0.5 * random.nextDouble());
            double precioUnitario = precioCompra * (1 + margenGanancia);
            producto.setPrecioCompra(precioCompra);
            producto.setMargenGanancia(margenGanancia);
            producto.setPrecioUnitario(Math.round(precioUnitario * 100.0) / 100.0);
            // Descripción ecológica
            producto.setDescripcion(generarDescripcionEcologica(faker));
            // Categoría (1-5)
            producto.setCategoriaId(random.nextInt(5) + 1);
            // Proveedor (1-10)
            producto.setProveedorPrincipalId(random.nextInt(10) + 1);
            // 80% de productos son ecológicos
            producto.setEsEcologico(random.nextDouble() < 0.8);
            // Fecha de registro (evitar método deprecated)
            long diasAtras = (long) (random.nextDouble() * 365);
            LocalDateTime fecha = LocalDateTime.now().minusDays(diasAtras);
            producto.setFechaRegistro(fecha.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
            // Estado (90% activos)
            producto.setEstado(random.nextDouble() < 0.9 ? "ACTIVE" : estados[random.nextInt(estados.length)]);
            productRepository.save(producto);
        }
        System.out.println("✅ Se han generado " + productRepository.count() + " productos en la base de datos H2");
        System.out.println("🔗 Accede a la consola H2 en: http://localhost:8090/h2-console");
        System.out.println("   JDBC URL: jdbc:h2:mem:ecomarketdb");
        System.out.println("   Usuario: sa");
        System.out.println("   Contraseña: (vacía)");
    }
    // Métodos auxiliares para nombres y descripciones ecológicas
    private String generarNombreProductoEcologico(Faker faker, Random random) {
        String[] adjetivos = {"Orgánico", "Natural", "Ecológico", "Sustentable", "Biodegradable"};
        String[] productos = {"Jabón", "Champú", "Acondicionador", "Gel de ducha", "Crema hidratante"};
        String[] aromas = {"lavanda", "eucalipto", "menta", "cítricos", "rosa mosqueta"};
        return adjetivos[random.nextInt(adjetivos.length)] + " " +
               productos[random.nextInt(productos.length)] + " de " +
               aromas[random.nextInt(aromas.length)];
    }
    private String generarDescripcionEcologica(Faker faker) {
        return "Este producto " + faker.commerce().adjective() + " está elaborado con ingredientes 100% " +
               faker.commerce().material() + " y aceites esenciales puros. Ideal para una vida más " +
               faker.commerce().adjective() + " y saludable.";
    }
}

// product-service/src/main/java/com/ecomarket/productservice/ProductServiceApplication.java
package com.ecomarket.productservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ProductServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(ProductServiceApplication.class, args);
    }
}

// product-service/src/main/resources/application.properties
spring.application.name=product-service
server.port=8090
spring.profiles.active=dev
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true

// product-service/src/main/resources/application-dev.properties
# Desarrollo - Base de datos H2
spring.datasource.url=jdbc:h2:mem:ecomarketdb_dev;DB_CLOSE_DELAY=-1
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization=true

// product-service/src/main/resources/application-test.properties
# Testing - Base de datos H2 separada
spring.datasource.url=jdbc:h2:mem:ecomarketdb_test;DB_CLOSE_DELAY=-1
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=false
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.sql.init.mode=never

// ===================== TESTS UNITARIOS Y DE INTEGRACIÓN =====================

// product-service/src/test/java/com/ecomarket/productservice/controller/ProductoControllerTest.java
package com.ecomarket.productservice.controller;

import com.ecomarket.productservice.model.Producto;
import com.ecomarket.productservice.service.ProductoService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Arrays;
import java.util.List;

import static org.hamcrest.Matchers.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(ProductoController.class)
@ActiveProfiles("test")
class ProductoControllerTest {
    @Autowired
    private MockMvc mockMvc;
    @MockBean
    private ProductoService productoService;
    @Autowired
    private ObjectMapper objectMapper;

    private Producto productoEcologico;
    private List<Producto> listaProductos;

    @BeforeEach
    void setUp() {
        productoEcologico = new Producto();
        productoEcologico.setProductoId(1);
        productoEcologico.setNombreProducto("Jabón de lavanda ecológico");
        productoEcologico.setCodigoSKU("ECO-001");
        productoEcologico.setPrecioUnitario(12.50);
        productoEcologico.setPrecioCompra(6.00);
        productoEcologico.setMargenGanancia(0.52);
        productoEcologico.setDescripcion("Jabón 100% natural");
        productoEcologico.setCategoriaId(1);
        productoEcologico.setProveedorPrincipalId(1);
        productoEcologico.setEsEcologico(true);
        productoEcologico.setFechaRegistro("2024-06-24 10:00:00");
        productoEcologico.setEstado("ACTIVE");

        listaProductos = Arrays.asList(productoEcologico);
    }

    @Test
    void testObtenerTodos() throws Exception {
        when(productoService.obtenerTodos()).thenReturn(listaProductos);

        mockMvc.perform(get("/api/v1/productos")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].nombreProducto", is("Jabón de lavanda ecológico")))
                .andExpect(jsonPath("$[0].codigoSKU", is("ECO-001")))
                .andExpect(jsonPath("$[0].precioUnitario", is(12.50)))
                .andExpect(jsonPath("$[0].precioCompra", is(6.00)))
                .andExpect(jsonPath("$[0].margenGanancia", is(0.52)))
                .andExpect(jsonPath("$[0].descripcion", is("Jabón 100% natural")))
                .andExpect(jsonPath("$[0].categoriaId", is(1)))
                .andExpect(jsonPath("$[0].proveedorPrincipalId", is(1)))
                .andExpect(jsonPath("$[0].esEcologico", is(true)))
                .andExpect(jsonPath("$[0].fechaRegistro", is("2024-06-24 10:00:00")))
                .andExpect(jsonPath("$[0].estado", is("ACTIVE")));

        verify(productoService, times(1)).obtenerTodos();
    }

    @Test
    void testObtenerPorId() throws Exception {
        when(productoService.buscarPorId(1)).thenReturn(productoEcologico);

        mockMvc.perform(get("/api/v1/productos/1")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.nombreProducto", is("Jabón de lavanda ecológico")))
                .andExpect(jsonPath("$.codigoSKU", is("ECO-001")))
                .andExpect(jsonPath("$.precioUnitario", is(12.50)))
                .andExpect(jsonPath("$.precioCompra", is(6.00)))
                .andExpect(jsonPath("$.margenGanancia", is(0.52)))
                .andExpect(jsonPath("$.descripcion", is("Jabón 100% natural")))
                .andExpect(jsonPath("$.categoriaId", is(1)))
                .andExpect(jsonPath("$.proveedorPrincipalId", is(1)))
                .andExpect(jsonPath("$.esEcologico", is(true)))
                .andExpect(jsonPath("$.fechaRegistro", is("2024-06-24 10:00:00")))
                .andExpect(jsonPath("$.estado", is("ACTIVE")));

        verify(productoService, times(1)).buscarPorId(1);
    }

    @Test
    void testCrearProducto() throws Exception {
        Producto nuevoProducto = new Producto();
        nuevoProducto.setNombreProducto("Aceite de oliva virgen extra");
        nuevoProducto.setCodigoSKU("ECO-002");
        nuevoProducto.setPrecioUnitario(25.00);
        nuevoProducto.setPrecioCompra(15.00);
        nuevoProducto.setMargenGanancia(0.40);
        nuevoProducto.setDescripcion("Aceite de oliva 100% orgánico, prensado en frío.");
        nuevoProducto.setCategoriaId(1);
        nuevoProducto.setProveedorPrincipalId(1);
        nuevoProducto.setEsEcologico(true);
        nuevoProducto.setFechaRegistro("2024-06-24 10:00:00");
        nuevoProducto.setEstado("ACTIVE");

        when(productoService.guardar(any(Producto.class))).thenReturn(nuevoProducto);

        mockMvc.perform(post("/api/v1/productos")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(nuevoProducto)))
                .andExpect(status().isCreated())
                .andExpect(header().string("Location", containsString("/api/v1/productos/")))
                .andExpect(jsonPath("$.nombreProducto", is("Aceite de oliva virgen extra")))
                .andExpect(jsonPath("$.codigoSKU", is("ECO-002")))
                .andExpect(jsonPath("$.precioUnitario", is(25.00)))
                .andExpect(jsonPath("$.precioCompra", is(15.00)))
                .andExpect(jsonPath("$.margenGanancia", is(0.40)))
                .andExpect(jsonPath("$.descripcion", is("Aceite de oliva 100% orgánico, prensado en frío.")))
                .andExpect(jsonPath("$.categoriaId", is(1)))
                .andExpect(jsonPath("$.proveedorPrincipalId", is(1)))
                .andExpect(jsonPath("$.esEcologico", is(true)))
                .andExpect(jsonPath("$.fechaRegistro", is("2024-06-24 10:00:00")))
                .andExpect(jsonPath("$.estado", is("ACTIVE")));

        verify(productoService, times(1)).guardar(any(Producto.class));
    }

    @Test
    void testActualizarProducto() throws Exception {
        Producto productoActualizado = new Producto();
        productoActualizado.setNombreProducto("Jabón de lavanda ecológico (actualizado)");
        productoActualizado.setCodigoSKU("ECO-001");
        productoActualizado.setPrecioUnitario(13.50);
        productoActualizado.setPrecioCompra(7.00);
        productoActualizado.setMargenGanancia(0.48);
        productoActualizado.setDescripcion("Jabón 100% natural con aceite esencial de lavanda.");
        productoActualizado.setCategoriaId(1);
        productoActualizado.setProveedorPrincipalId(1);
        productoActualizado.setEsEcologico(true);
        productoActualizado.setFechaRegistro("2024-06-24 10:00:00");
        productoActualizado.setEstado("ACTIVE");

        when(productoService.buscarPorId(1)).thenReturn(productoEcologico);
        when(productoService.actualizar(eq(1), any(Producto.class))).thenReturn(productoActualizado);

        mockMvc.perform(put("/api/v1/productos/1")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(productoActualizado)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.nombreProducto", is("Jabón de lavanda ecológico (actualizado)")))
                .andExpect(jsonPath("$.codigoSKU", is("ECO-001")))
                .andExpect(jsonPath("$.precioUnitario", is(13.50)))
                .andExpect(jsonPath("$.precioCompra", is(7.00)))
                .andExpect(jsonPath("$.margenGanancia", is(0.48)))
                .andExpect(jsonPath("$.descripcion", is("Jabón 100% natural con aceite esencial de lavanda.")))
                .andExpect(jsonPath("$.categoriaId", is(1)))
                .andExpect(jsonPath("$.proveedorPrincipalId", is(1)))
                .andExpect(jsonPath("$.esEcologico", is(true)))
                .andExpect(jsonPath("$.fechaRegistro", is("2024-06-24 10:00:00")))
                .andExpect(jsonPath("$.estado", is("ACTIVE")));

        verify(productoService, times(1)).buscarPorId(1);
        verify(productoService, times(1)).actualizar(eq(1), any(Producto.class));
    }

    @Test
    void testEliminarProducto() throws Exception {
        when(productoService.eliminar(1)).thenReturn(true);

        mockMvc.perform(delete("/api/v1/productos/1")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());

        verify(productoService, times(1)).eliminar(1);
    }

    @Test
    void testEliminarProductoNoEncontrado() throws Exception {
        when(productoService.eliminar(999)).thenReturn(false);

        mockMvc.perform(delete("/api/v1/productos/999")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isNotFound());

        verify(productoService, times(1)).eliminar(999);
    }
}

// product-service/src/test/java/com/ecomarket/productservice/service/ProductoServiceTest.java
package com.ecomarket.productservice.service;

import com.ecomarket.productservice.model.Producto;
import com.ecomarket.productservice.repository.ProductRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ProductoServiceTest {
    @Mock
    private ProductRepository productRepository;
    @InjectMocks
    private ProductoService productoService;

    private Producto productoEcologico;
    private Producto productoNoEcologico;

    @BeforeEach
    void setUp() {
        // Configurar productos de prueba
        productoEcologico = new Producto();
        productoEcologico.setProductoId(1);
        productoEcologico.setNombreProducto("Jabón de lavanda ecológico");
        productoEcologico.setCodigoSKU("ECO-001");
        productoEcologico.setPrecioUnitario(12.50);
        productoEcologico.setPrecioCompra(6.00);
        productoEcologico.setMargenGanancia(0.52);
        productoEcologico.setDescripcion("Jabón 100% natural");
        productoEcologico.setCategoriaId(1);
        productoEcologico.setProveedorPrincipalId(1);
        productoEcologico.setEsEcologico(true);
        productoEcologico.setFechaRegistro("2024-06-24 10:00:00");
        productoEcologico.setEstado("ACTIVE");

        productoNoEcologico = new Producto();
        productoNoEcologico.setProductoId(2);
        productoNoEcologico.setNombreProducto("Producto convencional");
        productoNoEcologico.setCodigoSKU("CONV-001");
        productoNoEcologico.setPrecioUnitario(8.99);
        productoNoEcologico.setPrecioCompra(4.50);
        productoNoEcologico.setMargenGanancia(0.50);
        productoNoEcologico.setDescripcion("Producto convencional");
        productoNoEcologico.setCategoriaId(2);
        productoNoEcologico.setProveedorPrincipalId(2);
        productoNoEcologico.setEsEcologico(false);
        productoNoEcologico.setFechaRegistro("2024-06-24 11:00:00");
        productoNoEcologico.setEstado("ACTIVE");
    }

    @Test
    void testObtenerTodos() {
        when(productRepository.findAll()).thenReturn(Arrays.asList(productoEcologico, productoNoEcologico));

        List<Producto> productos = productoService.obtenerTodos();

        assertNotNull(productos);
        assertEquals(2, productos.size());
        assertEquals("Jabón de lavanda ecológico", productos.get(0).getNombreProducto());
        assertEquals("Producto convencional", productos.get(1).getNombreProducto());
    }

    @Test
    void testBuscarPorId() {
        when(productRepository.findById(1)).thenReturn(Optional.of(productoEcologico));

        Producto producto = productoService.buscarPorId(1);

        assertNotNull(producto);
        assertEquals("Jabón de lavanda ecológico", producto.getNombreProducto());
    }

    @Test
    void testBuscarPorSKU() {
        when(productRepository.findByCodigoSKU("ECO-001")).thenReturn(Optional.of(productoEcologico));

        Producto producto = productoService.buscarPorSKU("ECO-001");

        assertNotNull(producto);
        assertEquals("Jabón de lavanda ecológico", producto.getNombreProducto());
    }

    @Test
    void testGuardar() {
        when(productRepository.save(any(Producto.class))).thenReturn(productoEcologico);

        Producto productoGuardado = productoService.guardar(productoEcologico);

        assertNotNull(productoGuardado);
        assertEquals("Jabón de lavanda ecológico", productoGuardado.getNombreProducto());
    }

    @Test
    void testActualizar() {
        when(productRepository.existsById(1)).thenReturn(true);
        when(productRepository.save(any(Producto.class))).thenReturn(productoEcologico);

        Producto productoActualizado = productoService.actualizar(1, productoEcologico);

        assertNotNull(productoActualizado);
        assertEquals("Jabón de lavanda ecológico", productoActualizado.getNombreProducto());
    }

    @Test
    void testEliminar() {
        when(productRepository.existsById(1)).thenReturn(true);

        boolean eliminado = productoService.eliminar(1);

        assertTrue(eliminado);
        verify(productRepository, times(1)).deleteById(1);
    }

    @Test
    void testEliminarNoExistente() {
        when(productRepository.existsById(999)).thenReturn(false);

        boolean eliminado = productoService.eliminar(999);

        assertFalse(eliminado);
        verify(productRepository, never()).deleteById(999);
    }

    @Test
    void testTotalProductos() {
        when(productRepository.count()).thenReturn(100L);

        int total = productoService.totalProductos();

        assertEquals(100, total);
    }

    @Test
    void testObtenerProductosEcologicos() {
        when(productRepository.findByEsEcologico(true)).thenReturn(Arrays.asList(productoEcologico));

        List<Producto> productosEcologicos = productoService.obtenerProductosEcologicos();

        assertNotNull(productosEcologicos);
        assertEquals(1, productosEcologicos.size());
        assertEquals("Jabón de lavanda ecológico", productosEcologicos.get(0).getNombreProducto());
    }

    @Test
    void testObtenerPorCategoria() {
        when(productRepository.findByCategoriaId(1)).thenReturn(Arrays.asList(productoEcologico));

        List<Producto> productosPorCategoria = productoService.obtenerPorCategoria(1);

        assertNotNull(productosPorCategoria);
        assertEquals(1, productosPorCategoria.size());
        assertEquals("Jabón de lavanda ecológico", productosPorCategoria.get(0).getNombreProducto());
    }

    @Test
    void testObtenerPorProveedorYEcologico() {
        when(productRepository.findByProveedorPrincipalIdAndEsEcologico(1, true)).thenReturn(Arrays.asList(productoEcologico));

        List<Producto> productosPorProveedorYEcologico = productoService.obtenerPorProveedorYEcologico(1, true);

        assertNotNull(productosPorProveedorYEcologico);
        assertEquals(1, productosPorProveedorYEcologico.size());
        assertEquals("Jabón de lavanda ecológico", productosPorProveedorYEcologico.get(0).getNombreProducto());
    }

    @Test
    void testObtenerPorRangoPrecio() {
        when(productRepository.findByPrecioUnitarioBetween(10.0, 15.0)).thenReturn(Arrays.asList(productoEcologico));

        List<Producto> productosPorRangoPrecio = productoService.obtenerPorRangoPrecio(10.0, 15.0);

        assertNotNull(productosPorRangoPrecio);
        assertEquals(1, productosPorRangoPrecio.size());
        assertEquals("Jabón de lavanda ecológico", productosPorRangoPrecio.get(0).getNombreProducto());
    }
}
